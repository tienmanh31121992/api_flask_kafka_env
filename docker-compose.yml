version: '3.9'
services:

  flask:
    build: ./app
    image: my_flask
    container_name: flask
    ports:
      - 5000:5000
    environment:
      APP_PORT: 5000
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_DBNAME: kafka
      MYSQL_HOST: mysql
      MYSQL_USER: root
      MYSQL_PASSWD: 1
      MYSQL_DBNAME: kafka
      KAFKA_HOSTNAME1: kafka1:9092
      KAFKA_HOSTNAME2: kafka2:9093
      KAFKA_HOSTNAME3: kafka3:9094
      ES_HOST: es1
      ES_PORT: 9200
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
    volumes:
      - ./app:/app
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command: /bin/sh -c "python3 main.py | python3 kafka_consumer.py"
    depends_on:
      - mongodb
      - mysql
      - kafka1
      - kafka2
      - kafka3

  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./data/mongodb:/data/db

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb

  zookeeper:
    image: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
    volumes:
      - ./data/zookeeper/data:/data
      - ./data/zookeeper/datalog:/datalog

  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    restart: always
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: ${IP_MACHINE}
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Topic:3:3,Test:2:3,Data:1:3"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      JMX_PORT: 1099
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=${IP_MACHINE} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper

  kafka2:
    image: wurstmeister/kafka
    container_name: kafka2
    restart: always
    ports:
      - 9093:9092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_HOST_NAME: ${IP_MACHINE}
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Topic:3:3,Test:2:3,Data:1:3"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      JMX_PORT: 1099
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=${IP_MACHINE} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      - kafka1

  kafka3:
    image: wurstmeister/kafka
    container_name: kafka3
    restart: always
    ports:
      - 9094:9092
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_HOST_NAME: ${IP_MACHINE}
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "Topic:3:3,Test:2:3,Data:1:3"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      JMX_PORT: 1099
      KAFKA_JMX_OPTS: "-Djava.rmi.server.hostname=${IP_MACHINE} -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      - kafka2

  kafka-manager:
    image: hlebalbau/kafka-manager
    container_name: kafka-manager
    restart: always
    ports:
      - 9000:9000
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: random-secret
    depends_on:
      - zookeeper

  mysql:
    image: mysql
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: 1
    volumes:
      - ./data/mysql:/var/lib/mysql

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - mysql

  es1:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es1
    restart: always
    environment:
      - node.name=es1
      - cluster.name=${ES_NAME_CLUSTER}
      - discovery.seed_hosts=es2,es3
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./data/elasticsearch/1:/usr/share/elasticsearch/data
  es2:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es2
    restart: always
    environment:
      - node.name=es2
      - cluster.name=${ES_NAME_CLUSTER}
      - discovery.seed_hosts=es1,es3
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/2:/usr/share/elasticsearch/data
  es3:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: es3
    restart: always
    environment:
      - node.name=es3
      - cluster.name=${ES_NAME_CLUSTER}
      - discovery.seed_hosts=es1,es2
      - cluster.initial_master_nodes=es1,es2,es3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/elasticsearch/3:/usr/share/elasticsearch/data
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: kibana
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: http://es1:9200
    ports:
      - 5601:5601
    depends_on:
      - es1
      - es2
      - es3
  logstash:
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    container_name: logstash
    restart: always
    ports:
      - 5044:5044
      - 9600:9600
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - xpack.monitoring.elasticsearch.hosts=["http://es1:9200"]
      - xpack.monitoring.enabled=true
    volumes:
      - ./data/logstash/pipline:/usr/share/logstash/pipeline
    depends_on:
      - es1
      - es2
      - es3
      - kafka1
      - kafka2
      - kafka3
